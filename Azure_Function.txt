Blob SAS token

sp=r&st=2023-03-01T20:11:47Z&se=2023-03-02T04:11:47Z&spr=https&sv=2021-06-08&sr=c&sig=M6WYpHCnTjFwUzBx5Gh%2BnE0nO4attGOGAI1SO1JRdJo%3D
Blob SAS URL
https://saeitaasdatateam.blob.core.usgovcloudapi.net/zz-for-darpan?sp=r&st=2023-03-01T20:11:47Z&se=2023-03-02T04:11:47Z&spr=https&sv=2021-06-08&sr=c&sig=M6WYpHCnTjFwUzBx5Gh%2BnE0nO4attGOGAI1SO1JRdJo%3D

public static class GetMetadata
{
    [FunctionName("GetMetadata")]
    public static async Task<IActionResult> Run(
        [HttpTrigger(AuthorizationLevel.Function, "post", Route = null)] HttpRequest req,
        ILogger log)
    {
        string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
        dynamic data = JsonConvert.DeserializeObject(requestBody);
        string storageAccount = data.storageAccount;
        string container = data.container;
        string folderPath = data.folderPath;  // with no leading slash
 
        var uri = $"https://{storageAccount}.blob.core.windows.net/";
        var serviceClient = new BlobServiceClient(new Uri(uri), new DefaultAzureCredential());
        var containerClient = serviceClient.GetBlobContainerClient(container);
 
        var files = new List<BlobFilePath>();
        await GetFiles(containerClient, folderPath, files);
 
        return new OkObjectResult("{\"childItems\":" + JsonConvert.SerializeObject(files) + "}");
    }
 
    private static async Task GetFiles(BlobContainerClient client, string path, List<BlobFilePath> files)
    {
        var pages = client.GetBlobsByHierarchyAsync(prefix: path, delimiter: "/").AsPages(default);
        await foreach (var page in pages)
        {
            foreach (var item in page.Values)
            {
                if (item.IsPrefix)
                    await GetFiles(client, item.Prefix, files);
                else
                    files.Add(new BlobFilePath(item.Blob.Name));
            }
        }
    }
}
