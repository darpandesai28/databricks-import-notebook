%sql
Select distinct generatedDateTime,date_format(generatedDateTime, 'HH:mm:ss') as Time,
case when date_format(generatedDateTime, 'HH:mm') between '00:00' and '14:30' then 'AM' else 'PM' end as TAG
 FROM cdereporting_stagedata.pbiActivityEvent

public static class GetMetadata
{
    [FunctionName("GetMetadata")]
    public static async Task<IActionResult> Run(
        [HttpTrigger(AuthorizationLevel.Function, "post", Route = null)] HttpRequest req,
        ILogger log)
    {
        string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
        dynamic data = JsonConvert.DeserializeObject(requestBody);
        string storageAccount = data.storageAccount;
        string container = data.container;
        string folderPath = data.folderPath;  // with no leading slash
 
        var uri = $"https://{storageAccount}.blob.core.windows.net/";
        var serviceClient = new BlobServiceClient(new Uri(uri), new DefaultAzureCredential());
        var containerClient = serviceClient.GetBlobContainerClient(container);
 
        var files = new List<BlobFilePath>();
        await GetFiles(containerClient, folderPath, files);
 
        return new OkObjectResult("{\"childItems\":" + JsonConvert.SerializeObject(files) + "}");
    }
 
    private static async Task GetFiles(BlobContainerClient client, string path, List<BlobFilePath> files)
    {
        var pages = client.GetBlobsByHierarchyAsync(prefix: path, delimiter: "/").AsPages(default);
        await foreach (var page in pages)
        {
            foreach (var item in page.Values)
            {
                if (item.IsPrefix)
                    await GetFiles(client, item.Prefix, files);
                else
                    files.Add(new BlobFilePath(item.Blob.Name));
            }
        }
    }
}
